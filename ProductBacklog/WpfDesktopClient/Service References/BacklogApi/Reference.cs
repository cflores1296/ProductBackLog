//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfDesktopClient.BacklogApi {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BacklogApi.IBackLogAPI", CallbackContract=typeof(WpfDesktopClient.BacklogApi.IBackLogAPICallback))]
    public interface IBackLogAPI {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBackLogAPI/SubscribeToNotifications")]
        void SubscribeToNotifications();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBackLogAPI/SubscribeToNotifications")]
        System.Threading.Tasks.Task SubscribeToNotificationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBackLogAPI/UnSubscribeFromNotificaitons")]
        void UnSubscribeFromNotificaitons();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBackLogAPI/UnSubscribeFromNotificaitons")]
        System.Threading.Tasks.Task UnSubscribeFromNotificaitonsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllGenders", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllGendersResponse")]
        System.Collections.Generic.List<WcfApi.Genders.Gender> GetAllGenders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllGenders", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllGendersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.Genders.Gender>> GetAllGendersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/FindGender", ReplyAction="http://tempuri.org/IBackLogAPI/FindGenderResponse")]
        WcfApi.Genders.Gender FindGender(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/FindGender", ReplyAction="http://tempuri.org/IBackLogAPI/FindGenderResponse")]
        System.Threading.Tasks.Task<WcfApi.Genders.Gender> FindGenderAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/AddUser", ReplyAction="http://tempuri.org/IBackLogAPI/AddUserResponse")]
        WcfApi.Users.User AddUser(WcfApi.Users.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/AddUser", ReplyAction="http://tempuri.org/IBackLogAPI/AddUserResponse")]
        System.Threading.Tasks.Task<WcfApi.Users.User> AddUserAsync(WcfApi.Users.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/UpdateUser", ReplyAction="http://tempuri.org/IBackLogAPI/UpdateUserResponse")]
        WcfApi.Users.User UpdateUser(WcfApi.Users.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/UpdateUser", ReplyAction="http://tempuri.org/IBackLogAPI/UpdateUserResponse")]
        System.Threading.Tasks.Task<WcfApi.Users.User> UpdateUserAsync(WcfApi.Users.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/RemoveUser", ReplyAction="http://tempuri.org/IBackLogAPI/RemoveUserResponse")]
        WcfApi.Users.RemovedUser RemoveUser(WcfApi.Users.RemovedUser removedUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/RemoveUser", ReplyAction="http://tempuri.org/IBackLogAPI/RemoveUserResponse")]
        System.Threading.Tasks.Task<WcfApi.Users.RemovedUser> RemoveUserAsync(WcfApi.Users.RemovedUser removedUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllUsers", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllUsersResponse")]
        System.Collections.Generic.List<WcfApi.Users.User> GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllUsers", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllUsersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.Users.User>> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllActiveUsers", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllActiveUsersResponse")]
        System.Collections.Generic.List<WcfApi.Users.User> GetAllActiveUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllActiveUsers", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllActiveUsersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.Users.User>> GetAllActiveUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllRemovedUsers", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllRemovedUsersResponse")]
        System.Collections.Generic.List<WcfApi.Users.RemovedUser> GetAllRemovedUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllRemovedUsers", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllRemovedUsersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.Users.RemovedUser>> GetAllRemovedUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetUser", ReplyAction="http://tempuri.org/IBackLogAPI/GetUserResponse")]
        WcfApi.Users.User GetUser(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetUser", ReplyAction="http://tempuri.org/IBackLogAPI/GetUserResponse")]
        System.Threading.Tasks.Task<WcfApi.Users.User> GetUserAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetRemovedUser", ReplyAction="http://tempuri.org/IBackLogAPI/GetRemovedUserResponse")]
        WcfApi.Users.RemovedUser GetRemovedUser(System.Guid removedUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetRemovedUser", ReplyAction="http://tempuri.org/IBackLogAPI/GetRemovedUserResponse")]
        System.Threading.Tasks.Task<WcfApi.Users.RemovedUser> GetRemovedUserAsync(System.Guid removedUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/FindUserLogin", ReplyAction="http://tempuri.org/IBackLogAPI/FindUserLoginResponse")]
        WcfApi.UserLogins.UserLogin FindUserLogin(string userId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/FindUserLogin", ReplyAction="http://tempuri.org/IBackLogAPI/FindUserLoginResponse")]
        System.Threading.Tasks.Task<WcfApi.UserLogins.UserLogin> FindUserLoginAsync(string userId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllUserLogins", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllUserLoginsResponse")]
        System.Collections.Generic.List<WcfApi.UserLogins.UserLogin> GetAllUserLogins();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllUserLogins", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllUserLoginsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.UserLogins.UserLogin>> GetAllUserLoginsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllRemovedUserLogins", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllRemovedUserLoginsResponse")]
        System.Collections.Generic.List<WcfApi.UserLogins.RemovedUserLogin> GetAllRemovedUserLogins();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllRemovedUserLogins", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllRemovedUserLoginsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.UserLogins.RemovedUserLogin>> GetAllRemovedUserLoginsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllActiveUserLogins", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllActiveUserLoginsResponse")]
        System.Collections.Generic.List<WcfApi.UserLogins.UserLogin> GetAllActiveUserLogins();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllActiveUserLogins", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllActiveUserLoginsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.UserLogins.UserLogin>> GetAllActiveUserLoginsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetUserLogins", ReplyAction="http://tempuri.org/IBackLogAPI/GetUserLoginsResponse")]
        System.Collections.Generic.List<WcfApi.UserLogins.UserLogin> GetUserLogins(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetUserLogins", ReplyAction="http://tempuri.org/IBackLogAPI/GetUserLoginsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.UserLogins.UserLogin>> GetUserLoginsAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetRemovedUserLogins", ReplyAction="http://tempuri.org/IBackLogAPI/GetRemovedUserLoginsResponse")]
        System.Collections.Generic.List<WcfApi.UserLogins.RemovedUserLogin> GetRemovedUserLogins(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetRemovedUserLogins", ReplyAction="http://tempuri.org/IBackLogAPI/GetRemovedUserLoginsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.UserLogins.RemovedUserLogin>> GetRemovedUserLoginsAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetActiveUserLogins", ReplyAction="http://tempuri.org/IBackLogAPI/GetActiveUserLoginsResponse")]
        System.Collections.Generic.List<WcfApi.UserLogins.UserLogin> GetActiveUserLogins(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetActiveUserLogins", ReplyAction="http://tempuri.org/IBackLogAPI/GetActiveUserLoginsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.UserLogins.UserLogin>> GetActiveUserLoginsAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetUserLogin", ReplyAction="http://tempuri.org/IBackLogAPI/GetUserLoginResponse")]
        WcfApi.UserLogins.UserLogin GetUserLogin(System.Guid userLoginId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetUserLogin", ReplyAction="http://tempuri.org/IBackLogAPI/GetUserLoginResponse")]
        System.Threading.Tasks.Task<WcfApi.UserLogins.UserLogin> GetUserLoginAsync(System.Guid userLoginId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/AddUserLogin", ReplyAction="http://tempuri.org/IBackLogAPI/AddUserLoginResponse")]
        WcfApi.UserLogins.UserLogin AddUserLogin(WcfApi.UserLogins.UserLogin userLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/AddUserLogin", ReplyAction="http://tempuri.org/IBackLogAPI/AddUserLoginResponse")]
        System.Threading.Tasks.Task<WcfApi.UserLogins.UserLogin> AddUserLoginAsync(WcfApi.UserLogins.UserLogin userLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/UpdateUserLogin", ReplyAction="http://tempuri.org/IBackLogAPI/UpdateUserLoginResponse")]
        WcfApi.UserLogins.UserLogin UpdateUserLogin(WcfApi.UserLogins.UserLogin userLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/UpdateUserLogin", ReplyAction="http://tempuri.org/IBackLogAPI/UpdateUserLoginResponse")]
        System.Threading.Tasks.Task<WcfApi.UserLogins.UserLogin> UpdateUserLoginAsync(WcfApi.UserLogins.UserLogin userLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/RemoveUserLogin", ReplyAction="http://tempuri.org/IBackLogAPI/RemoveUserLoginResponse")]
        WcfApi.UserLogins.RemovedUserLogin RemoveUserLogin(WcfApi.UserLogins.RemovedUserLogin removedUserLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/RemoveUserLogin", ReplyAction="http://tempuri.org/IBackLogAPI/RemoveUserLoginResponse")]
        System.Threading.Tasks.Task<WcfApi.UserLogins.RemovedUserLogin> RemoveUserLoginAsync(WcfApi.UserLogins.RemovedUserLogin removedUserLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllAccessRights", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllAccessRightsResponse")]
        System.Collections.Generic.List<WcfApi.AccessRights.AccessRight> GetAllAccessRights();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllAccessRights", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllAccessRightsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.AccessRights.AccessRight>> GetAllAccessRightsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllRemovedAccessRights", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllRemovedAccessRightsResponse")]
        System.Collections.Generic.List<WcfApi.AccessRights.RemovedAccessRight> GetAllRemovedAccessRights();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllRemovedAccessRights", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllRemovedAccessRightsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.AccessRights.RemovedAccessRight>> GetAllRemovedAccessRightsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllActiveAccessRights", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllActiveAccessRightsResponse")]
        System.Collections.Generic.List<WcfApi.AccessRights.AccessRight> GetAllActiveAccessRights();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllActiveAccessRights", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllActiveAccessRightsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.AccessRights.AccessRight>> GetAllActiveAccessRightsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAccessRight", ReplyAction="http://tempuri.org/IBackLogAPI/GetAccessRightResponse")]
        WcfApi.AccessRights.AccessRight GetAccessRight(System.Guid accessRightId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAccessRight", ReplyAction="http://tempuri.org/IBackLogAPI/GetAccessRightResponse")]
        System.Threading.Tasks.Task<WcfApi.AccessRights.AccessRight> GetAccessRightAsync(System.Guid accessRightId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/AddAccessRight", ReplyAction="http://tempuri.org/IBackLogAPI/AddAccessRightResponse")]
        WcfApi.AccessRights.AccessRight AddAccessRight(WcfApi.AccessRights.AccessRight accessRight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/AddAccessRight", ReplyAction="http://tempuri.org/IBackLogAPI/AddAccessRightResponse")]
        System.Threading.Tasks.Task<WcfApi.AccessRights.AccessRight> AddAccessRightAsync(WcfApi.AccessRights.AccessRight accessRight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/UpdateAccessRight", ReplyAction="http://tempuri.org/IBackLogAPI/UpdateAccessRightResponse")]
        WcfApi.AccessRights.AccessRight UpdateAccessRight(WcfApi.AccessRights.AccessRight accessRight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/UpdateAccessRight", ReplyAction="http://tempuri.org/IBackLogAPI/UpdateAccessRightResponse")]
        System.Threading.Tasks.Task<WcfApi.AccessRights.AccessRight> UpdateAccessRightAsync(WcfApi.AccessRights.AccessRight accessRight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/RemoveAccessRight", ReplyAction="http://tempuri.org/IBackLogAPI/RemoveAccessRightResponse")]
        WcfApi.AccessRights.RemovedAccessRight RemoveAccessRight(WcfApi.AccessRights.RemovedAccessRight removedAccessRight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/RemoveAccessRight", ReplyAction="http://tempuri.org/IBackLogAPI/RemoveAccessRightResponse")]
        System.Threading.Tasks.Task<WcfApi.AccessRights.RemovedAccessRight> RemoveAccessRightAsync(WcfApi.AccessRights.RemovedAccessRight removedAccessRight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllUserAccessRights", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllUserAccessRightsResponse")]
        System.Collections.Generic.List<WcfApi.AccessRights.UserAccessRight> GetAllUserAccessRights();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllUserAccessRights", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllUserAccessRightsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.AccessRights.UserAccessRight>> GetAllUserAccessRightsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllRemovedUserAccessRights", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllRemovedUserAccessRightsResponse")]
        System.Collections.Generic.List<WcfApi.AccessRights.RemovedUserAccessRight> GetAllRemovedUserAccessRights();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllRemovedUserAccessRights", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllRemovedUserAccessRightsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.AccessRights.RemovedUserAccessRight>> GetAllRemovedUserAccessRightsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllActiveUserAccessRights", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllActiveUserAccessRightsResponse")]
        System.Collections.Generic.List<WcfApi.AccessRights.UserAccessRight> GetAllActiveUserAccessRights();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllActiveUserAccessRights", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllActiveUserAccessRightsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.AccessRights.UserAccessRight>> GetAllActiveUserAccessRightsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetUserAccessRights", ReplyAction="http://tempuri.org/IBackLogAPI/GetUserAccessRightsResponse")]
        System.Collections.Generic.List<WcfApi.AccessRights.UserAccessRight> GetUserAccessRights(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetUserAccessRights", ReplyAction="http://tempuri.org/IBackLogAPI/GetUserAccessRightsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.AccessRights.UserAccessRight>> GetUserAccessRightsAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetRemovedUserAccessRights", ReplyAction="http://tempuri.org/IBackLogAPI/GetRemovedUserAccessRightsResponse")]
        System.Collections.Generic.List<WcfApi.AccessRights.RemovedUserAccessRight> GetRemovedUserAccessRights(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetRemovedUserAccessRights", ReplyAction="http://tempuri.org/IBackLogAPI/GetRemovedUserAccessRightsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.AccessRights.RemovedUserAccessRight>> GetRemovedUserAccessRightsAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetActiveUserAccessRights", ReplyAction="http://tempuri.org/IBackLogAPI/GetActiveUserAccessRightsResponse")]
        System.Collections.Generic.List<WcfApi.AccessRights.UserAccessRight> GetActiveUserAccessRights(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetActiveUserAccessRights", ReplyAction="http://tempuri.org/IBackLogAPI/GetActiveUserAccessRightsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.AccessRights.UserAccessRight>> GetActiveUserAccessRightsAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/AddUserAccessRight", ReplyAction="http://tempuri.org/IBackLogAPI/AddUserAccessRightResponse")]
        WcfApi.AccessRights.UserAccessRight AddUserAccessRight(WcfApi.AccessRights.UserAccessRight userAccessRight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/AddUserAccessRight", ReplyAction="http://tempuri.org/IBackLogAPI/AddUserAccessRightResponse")]
        System.Threading.Tasks.Task<WcfApi.AccessRights.UserAccessRight> AddUserAccessRightAsync(WcfApi.AccessRights.UserAccessRight userAccessRight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/UpdateUserAccessRight", ReplyAction="http://tempuri.org/IBackLogAPI/UpdateUserAccessRightResponse")]
        WcfApi.AccessRights.UserAccessRight UpdateUserAccessRight(WcfApi.AccessRights.UserAccessRight userAccessRight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/UpdateUserAccessRight", ReplyAction="http://tempuri.org/IBackLogAPI/UpdateUserAccessRightResponse")]
        System.Threading.Tasks.Task<WcfApi.AccessRights.UserAccessRight> UpdateUserAccessRightAsync(WcfApi.AccessRights.UserAccessRight userAccessRight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/RemoveUserAccessRight", ReplyAction="http://tempuri.org/IBackLogAPI/RemoveUserAccessRightResponse")]
        WcfApi.AccessRights.RemovedUserAccessRight RemoveUserAccessRight(WcfApi.AccessRights.RemovedUserAccessRight removedUserAccessRight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/RemoveUserAccessRight", ReplyAction="http://tempuri.org/IBackLogAPI/RemoveUserAccessRightResponse")]
        System.Threading.Tasks.Task<WcfApi.AccessRights.RemovedUserAccessRight> RemoveUserAccessRightAsync(WcfApi.AccessRights.RemovedUserAccessRight removedUserAccessRight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/AddCustomer", ReplyAction="http://tempuri.org/IBackLogAPI/AddCustomerResponse")]
        WcfApi.Customers.Customer AddCustomer(WcfApi.Customers.Customer customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/AddCustomer", ReplyAction="http://tempuri.org/IBackLogAPI/AddCustomerResponse")]
        System.Threading.Tasks.Task<WcfApi.Customers.Customer> AddCustomerAsync(WcfApi.Customers.Customer customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/UpdateCustomer", ReplyAction="http://tempuri.org/IBackLogAPI/UpdateCustomerResponse")]
        WcfApi.Customers.Customer UpdateCustomer(WcfApi.Customers.Customer customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/UpdateCustomer", ReplyAction="http://tempuri.org/IBackLogAPI/UpdateCustomerResponse")]
        System.Threading.Tasks.Task<WcfApi.Customers.Customer> UpdateCustomerAsync(WcfApi.Customers.Customer customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/RemoveCustomer", ReplyAction="http://tempuri.org/IBackLogAPI/RemoveCustomerResponse")]
        WcfApi.Customers.RemovedCustomer RemoveCustomer(WcfApi.Customers.RemovedCustomer removedCustomer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/RemoveCustomer", ReplyAction="http://tempuri.org/IBackLogAPI/RemoveCustomerResponse")]
        System.Threading.Tasks.Task<WcfApi.Customers.RemovedCustomer> RemoveCustomerAsync(WcfApi.Customers.RemovedCustomer removedCustomer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllCustomers", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllCustomersResponse")]
        System.Collections.Generic.List<WcfApi.Customers.Customer> GetAllCustomers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllCustomers", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllCustomersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.Customers.Customer>> GetAllCustomersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllActiveCustomers", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllActiveCustomersResponse")]
        System.Collections.Generic.List<WcfApi.Customers.Customer> GetAllActiveCustomers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllActiveCustomers", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllActiveCustomersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.Customers.Customer>> GetAllActiveCustomersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllRemovedCustomers", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllRemovedCustomersResponse")]
        System.Collections.Generic.List<WcfApi.Customers.RemovedCustomer> GetAllRemovedCustomers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllRemovedCustomers", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllRemovedCustomersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.Customers.RemovedCustomer>> GetAllRemovedCustomersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetCustomer", ReplyAction="http://tempuri.org/IBackLogAPI/GetCustomerResponse")]
        WcfApi.Customers.Customer GetCustomer(System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetCustomer", ReplyAction="http://tempuri.org/IBackLogAPI/GetCustomerResponse")]
        System.Threading.Tasks.Task<WcfApi.Customers.Customer> GetCustomerAsync(System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetRemovedCustomer", ReplyAction="http://tempuri.org/IBackLogAPI/GetRemovedCustomerResponse")]
        WcfApi.Customers.RemovedCustomer GetRemovedCustomer(System.Guid removedCustomerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetRemovedCustomer", ReplyAction="http://tempuri.org/IBackLogAPI/GetRemovedCustomerResponse")]
        System.Threading.Tasks.Task<WcfApi.Customers.RemovedCustomer> GetRemovedCustomerAsync(System.Guid removedCustomerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllWorkTypes", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllWorkTypesResponse")]
        System.Collections.Generic.List<WcfApi.WorkTypes.WorkType> GetAllWorkTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllWorkTypes", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllWorkTypesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.WorkTypes.WorkType>> GetAllWorkTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/FindWorkType", ReplyAction="http://tempuri.org/IBackLogAPI/FindWorkTypeResponse")]
        WcfApi.WorkTypes.WorkType FindWorkType(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/FindWorkType", ReplyAction="http://tempuri.org/IBackLogAPI/FindWorkTypeResponse")]
        System.Threading.Tasks.Task<WcfApi.WorkTypes.WorkType> FindWorkTypeAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllWorkStatuses", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllWorkStatusesResponse")]
        System.Collections.Generic.List<WcfApi.WorkStatuses.WorkStatus> GetAllWorkStatuses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllWorkStatuses", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllWorkStatusesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.WorkStatuses.WorkStatus>> GetAllWorkStatusesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/FindWorkStatus", ReplyAction="http://tempuri.org/IBackLogAPI/FindWorkStatusResponse")]
        WcfApi.WorkStatuses.WorkStatus FindWorkStatus(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/FindWorkStatus", ReplyAction="http://tempuri.org/IBackLogAPI/FindWorkStatusResponse")]
        System.Threading.Tasks.Task<WcfApi.WorkStatuses.WorkStatus> FindWorkStatusAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllSoftwareTypes", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllSoftwareTypesResponse")]
        System.Collections.Generic.List<WcfApi.SoftwareTypes.SoftwareType> GetAllSoftwareTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllSoftwareTypes", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllSoftwareTypesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.SoftwareTypes.SoftwareType>> GetAllSoftwareTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/FindSoftwareType", ReplyAction="http://tempuri.org/IBackLogAPI/FindSoftwareTypeResponse")]
        WcfApi.SoftwareTypes.SoftwareType FindSoftwareType(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/FindSoftwareType", ReplyAction="http://tempuri.org/IBackLogAPI/FindSoftwareTypeResponse")]
        System.Threading.Tasks.Task<WcfApi.SoftwareTypes.SoftwareType> FindSoftwareTypeAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllWorkRequests", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllWorkRequestsResponse")]
        System.Collections.Generic.List<WcfApi.WorkRequests.WorkRequest> GetAllWorkRequests();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllWorkRequests", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllWorkRequestsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.WorkRequests.WorkRequest>> GetAllWorkRequestsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllRemovedWorkRequests", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllRemovedWorkRequestsResponse")]
        System.Collections.Generic.List<WcfApi.WorkRequests.RemovedWorkRequest> GetAllRemovedWorkRequests();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllRemovedWorkRequests", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllRemovedWorkRequestsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.WorkRequests.RemovedWorkRequest>> GetAllRemovedWorkRequestsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllActiveWorkRequests", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllActiveWorkRequestsResponse")]
        System.Collections.Generic.List<WcfApi.WorkRequests.WorkRequest> GetAllActiveWorkRequests();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetAllActiveWorkRequests", ReplyAction="http://tempuri.org/IBackLogAPI/GetAllActiveWorkRequestsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.WorkRequests.WorkRequest>> GetAllActiveWorkRequestsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/AddWorkRequest", ReplyAction="http://tempuri.org/IBackLogAPI/AddWorkRequestResponse")]
        WcfApi.WorkRequests.WorkRequest AddWorkRequest(WcfApi.WorkRequests.WorkRequest workRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/AddWorkRequest", ReplyAction="http://tempuri.org/IBackLogAPI/AddWorkRequestResponse")]
        System.Threading.Tasks.Task<WcfApi.WorkRequests.WorkRequest> AddWorkRequestAsync(WcfApi.WorkRequests.WorkRequest workRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/UpdateWorkRequest", ReplyAction="http://tempuri.org/IBackLogAPI/UpdateWorkRequestResponse")]
        WcfApi.WorkRequests.WorkRequest UpdateWorkRequest(WcfApi.WorkRequests.WorkRequest workRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/UpdateWorkRequest", ReplyAction="http://tempuri.org/IBackLogAPI/UpdateWorkRequestResponse")]
        System.Threading.Tasks.Task<WcfApi.WorkRequests.WorkRequest> UpdateWorkRequestAsync(WcfApi.WorkRequests.WorkRequest workRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/RemoveWorkRequest", ReplyAction="http://tempuri.org/IBackLogAPI/RemoveWorkRequestResponse")]
        WcfApi.WorkRequests.RemovedWorkRequest RemoveWorkRequest(WcfApi.WorkRequests.RemovedWorkRequest removedWorkRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/RemoveWorkRequest", ReplyAction="http://tempuri.org/IBackLogAPI/RemoveWorkRequestResponse")]
        System.Threading.Tasks.Task<WcfApi.WorkRequests.RemovedWorkRequest> RemoveWorkRequestAsync(WcfApi.WorkRequests.RemovedWorkRequest removedWorkRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetWorkRequest", ReplyAction="http://tempuri.org/IBackLogAPI/GetWorkRequestResponse")]
        WcfApi.WorkRequests.WorkRequest GetWorkRequest(System.Guid workRequestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetWorkRequest", ReplyAction="http://tempuri.org/IBackLogAPI/GetWorkRequestResponse")]
        System.Threading.Tasks.Task<WcfApi.WorkRequests.WorkRequest> GetWorkRequestAsync(System.Guid workRequestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetRemovedWorkRequest", ReplyAction="http://tempuri.org/IBackLogAPI/GetRemovedWorkRequestResponse")]
        WcfApi.WorkRequests.RemovedWorkRequest GetRemovedWorkRequest(System.Guid removedWorkRequestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackLogAPI/GetRemovedWorkRequest", ReplyAction="http://tempuri.org/IBackLogAPI/GetRemovedWorkRequestResponse")]
        System.Threading.Tasks.Task<WcfApi.WorkRequests.RemovedWorkRequest> GetRemovedWorkRequestAsync(System.Guid removedWorkRequestId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBackLogAPICallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBackLogAPI/CustomerWasAddedNotification")]
        void CustomerWasAddedNotification(System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBackLogAPI/CustomerWasUpdatedNotification")]
        void CustomerWasUpdatedNotification(System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBackLogAPI/CustomerWasRemovedNotification")]
        void CustomerWasRemovedNotification(System.Guid removedCustomerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBackLogAPI/UserWasAddedNotification")]
        void UserWasAddedNotification(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBackLogAPI/UserWasUpdatedNotification")]
        void UserWasUpdatedNotification(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBackLogAPI/UserWasRemovedNotification")]
        void UserWasRemovedNotification(System.Guid removedUserId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBackLogAPI/WorkRequestWasAddedNotification")]
        void WorkRequestWasAddedNotification(System.Guid workRequestId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBackLogAPI/WorkRequestWasUpdatedNotification")]
        void WorkRequestWasUpdatedNotification(System.Guid workRequestId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBackLogAPI/WorkRequestWasRemovedNotification")]
        void WorkRequestWasRemovedNotification(System.Guid removedWorkRequestId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBackLogAPIChannel : WpfDesktopClient.BacklogApi.IBackLogAPI, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BackLogAPIClient : System.ServiceModel.DuplexClientBase<WpfDesktopClient.BacklogApi.IBackLogAPI>, WpfDesktopClient.BacklogApi.IBackLogAPI {
        
        public BackLogAPIClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public BackLogAPIClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public BackLogAPIClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public BackLogAPIClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public BackLogAPIClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SubscribeToNotifications() {
            base.Channel.SubscribeToNotifications();
        }
        
        public System.Threading.Tasks.Task SubscribeToNotificationsAsync() {
            return base.Channel.SubscribeToNotificationsAsync();
        }
        
        public void UnSubscribeFromNotificaitons() {
            base.Channel.UnSubscribeFromNotificaitons();
        }
        
        public System.Threading.Tasks.Task UnSubscribeFromNotificaitonsAsync() {
            return base.Channel.UnSubscribeFromNotificaitonsAsync();
        }
        
        public System.Collections.Generic.List<WcfApi.Genders.Gender> GetAllGenders() {
            return base.Channel.GetAllGenders();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.Genders.Gender>> GetAllGendersAsync() {
            return base.Channel.GetAllGendersAsync();
        }
        
        public WcfApi.Genders.Gender FindGender(string name) {
            return base.Channel.FindGender(name);
        }
        
        public System.Threading.Tasks.Task<WcfApi.Genders.Gender> FindGenderAsync(string name) {
            return base.Channel.FindGenderAsync(name);
        }
        
        public WcfApi.Users.User AddUser(WcfApi.Users.User user) {
            return base.Channel.AddUser(user);
        }
        
        public System.Threading.Tasks.Task<WcfApi.Users.User> AddUserAsync(WcfApi.Users.User user) {
            return base.Channel.AddUserAsync(user);
        }
        
        public WcfApi.Users.User UpdateUser(WcfApi.Users.User user) {
            return base.Channel.UpdateUser(user);
        }
        
        public System.Threading.Tasks.Task<WcfApi.Users.User> UpdateUserAsync(WcfApi.Users.User user) {
            return base.Channel.UpdateUserAsync(user);
        }
        
        public WcfApi.Users.RemovedUser RemoveUser(WcfApi.Users.RemovedUser removedUser) {
            return base.Channel.RemoveUser(removedUser);
        }
        
        public System.Threading.Tasks.Task<WcfApi.Users.RemovedUser> RemoveUserAsync(WcfApi.Users.RemovedUser removedUser) {
            return base.Channel.RemoveUserAsync(removedUser);
        }
        
        public System.Collections.Generic.List<WcfApi.Users.User> GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.Users.User>> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public System.Collections.Generic.List<WcfApi.Users.User> GetAllActiveUsers() {
            return base.Channel.GetAllActiveUsers();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.Users.User>> GetAllActiveUsersAsync() {
            return base.Channel.GetAllActiveUsersAsync();
        }
        
        public System.Collections.Generic.List<WcfApi.Users.RemovedUser> GetAllRemovedUsers() {
            return base.Channel.GetAllRemovedUsers();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.Users.RemovedUser>> GetAllRemovedUsersAsync() {
            return base.Channel.GetAllRemovedUsersAsync();
        }
        
        public WcfApi.Users.User GetUser(System.Guid userId) {
            return base.Channel.GetUser(userId);
        }
        
        public System.Threading.Tasks.Task<WcfApi.Users.User> GetUserAsync(System.Guid userId) {
            return base.Channel.GetUserAsync(userId);
        }
        
        public WcfApi.Users.RemovedUser GetRemovedUser(System.Guid removedUserId) {
            return base.Channel.GetRemovedUser(removedUserId);
        }
        
        public System.Threading.Tasks.Task<WcfApi.Users.RemovedUser> GetRemovedUserAsync(System.Guid removedUserId) {
            return base.Channel.GetRemovedUserAsync(removedUserId);
        }
        
        public WcfApi.UserLogins.UserLogin FindUserLogin(string userId, string password) {
            return base.Channel.FindUserLogin(userId, password);
        }
        
        public System.Threading.Tasks.Task<WcfApi.UserLogins.UserLogin> FindUserLoginAsync(string userId, string password) {
            return base.Channel.FindUserLoginAsync(userId, password);
        }
        
        public System.Collections.Generic.List<WcfApi.UserLogins.UserLogin> GetAllUserLogins() {
            return base.Channel.GetAllUserLogins();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.UserLogins.UserLogin>> GetAllUserLoginsAsync() {
            return base.Channel.GetAllUserLoginsAsync();
        }
        
        public System.Collections.Generic.List<WcfApi.UserLogins.RemovedUserLogin> GetAllRemovedUserLogins() {
            return base.Channel.GetAllRemovedUserLogins();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.UserLogins.RemovedUserLogin>> GetAllRemovedUserLoginsAsync() {
            return base.Channel.GetAllRemovedUserLoginsAsync();
        }
        
        public System.Collections.Generic.List<WcfApi.UserLogins.UserLogin> GetAllActiveUserLogins() {
            return base.Channel.GetAllActiveUserLogins();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.UserLogins.UserLogin>> GetAllActiveUserLoginsAsync() {
            return base.Channel.GetAllActiveUserLoginsAsync();
        }
        
        public System.Collections.Generic.List<WcfApi.UserLogins.UserLogin> GetUserLogins(System.Guid userId) {
            return base.Channel.GetUserLogins(userId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.UserLogins.UserLogin>> GetUserLoginsAsync(System.Guid userId) {
            return base.Channel.GetUserLoginsAsync(userId);
        }
        
        public System.Collections.Generic.List<WcfApi.UserLogins.RemovedUserLogin> GetRemovedUserLogins(System.Guid userId) {
            return base.Channel.GetRemovedUserLogins(userId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.UserLogins.RemovedUserLogin>> GetRemovedUserLoginsAsync(System.Guid userId) {
            return base.Channel.GetRemovedUserLoginsAsync(userId);
        }
        
        public System.Collections.Generic.List<WcfApi.UserLogins.UserLogin> GetActiveUserLogins(System.Guid userId) {
            return base.Channel.GetActiveUserLogins(userId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.UserLogins.UserLogin>> GetActiveUserLoginsAsync(System.Guid userId) {
            return base.Channel.GetActiveUserLoginsAsync(userId);
        }
        
        public WcfApi.UserLogins.UserLogin GetUserLogin(System.Guid userLoginId) {
            return base.Channel.GetUserLogin(userLoginId);
        }
        
        public System.Threading.Tasks.Task<WcfApi.UserLogins.UserLogin> GetUserLoginAsync(System.Guid userLoginId) {
            return base.Channel.GetUserLoginAsync(userLoginId);
        }
        
        public WcfApi.UserLogins.UserLogin AddUserLogin(WcfApi.UserLogins.UserLogin userLogin) {
            return base.Channel.AddUserLogin(userLogin);
        }
        
        public System.Threading.Tasks.Task<WcfApi.UserLogins.UserLogin> AddUserLoginAsync(WcfApi.UserLogins.UserLogin userLogin) {
            return base.Channel.AddUserLoginAsync(userLogin);
        }
        
        public WcfApi.UserLogins.UserLogin UpdateUserLogin(WcfApi.UserLogins.UserLogin userLogin) {
            return base.Channel.UpdateUserLogin(userLogin);
        }
        
        public System.Threading.Tasks.Task<WcfApi.UserLogins.UserLogin> UpdateUserLoginAsync(WcfApi.UserLogins.UserLogin userLogin) {
            return base.Channel.UpdateUserLoginAsync(userLogin);
        }
        
        public WcfApi.UserLogins.RemovedUserLogin RemoveUserLogin(WcfApi.UserLogins.RemovedUserLogin removedUserLogin) {
            return base.Channel.RemoveUserLogin(removedUserLogin);
        }
        
        public System.Threading.Tasks.Task<WcfApi.UserLogins.RemovedUserLogin> RemoveUserLoginAsync(WcfApi.UserLogins.RemovedUserLogin removedUserLogin) {
            return base.Channel.RemoveUserLoginAsync(removedUserLogin);
        }
        
        public System.Collections.Generic.List<WcfApi.AccessRights.AccessRight> GetAllAccessRights() {
            return base.Channel.GetAllAccessRights();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.AccessRights.AccessRight>> GetAllAccessRightsAsync() {
            return base.Channel.GetAllAccessRightsAsync();
        }
        
        public System.Collections.Generic.List<WcfApi.AccessRights.RemovedAccessRight> GetAllRemovedAccessRights() {
            return base.Channel.GetAllRemovedAccessRights();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.AccessRights.RemovedAccessRight>> GetAllRemovedAccessRightsAsync() {
            return base.Channel.GetAllRemovedAccessRightsAsync();
        }
        
        public System.Collections.Generic.List<WcfApi.AccessRights.AccessRight> GetAllActiveAccessRights() {
            return base.Channel.GetAllActiveAccessRights();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.AccessRights.AccessRight>> GetAllActiveAccessRightsAsync() {
            return base.Channel.GetAllActiveAccessRightsAsync();
        }
        
        public WcfApi.AccessRights.AccessRight GetAccessRight(System.Guid accessRightId) {
            return base.Channel.GetAccessRight(accessRightId);
        }
        
        public System.Threading.Tasks.Task<WcfApi.AccessRights.AccessRight> GetAccessRightAsync(System.Guid accessRightId) {
            return base.Channel.GetAccessRightAsync(accessRightId);
        }
        
        public WcfApi.AccessRights.AccessRight AddAccessRight(WcfApi.AccessRights.AccessRight accessRight) {
            return base.Channel.AddAccessRight(accessRight);
        }
        
        public System.Threading.Tasks.Task<WcfApi.AccessRights.AccessRight> AddAccessRightAsync(WcfApi.AccessRights.AccessRight accessRight) {
            return base.Channel.AddAccessRightAsync(accessRight);
        }
        
        public WcfApi.AccessRights.AccessRight UpdateAccessRight(WcfApi.AccessRights.AccessRight accessRight) {
            return base.Channel.UpdateAccessRight(accessRight);
        }
        
        public System.Threading.Tasks.Task<WcfApi.AccessRights.AccessRight> UpdateAccessRightAsync(WcfApi.AccessRights.AccessRight accessRight) {
            return base.Channel.UpdateAccessRightAsync(accessRight);
        }
        
        public WcfApi.AccessRights.RemovedAccessRight RemoveAccessRight(WcfApi.AccessRights.RemovedAccessRight removedAccessRight) {
            return base.Channel.RemoveAccessRight(removedAccessRight);
        }
        
        public System.Threading.Tasks.Task<WcfApi.AccessRights.RemovedAccessRight> RemoveAccessRightAsync(WcfApi.AccessRights.RemovedAccessRight removedAccessRight) {
            return base.Channel.RemoveAccessRightAsync(removedAccessRight);
        }
        
        public System.Collections.Generic.List<WcfApi.AccessRights.UserAccessRight> GetAllUserAccessRights() {
            return base.Channel.GetAllUserAccessRights();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.AccessRights.UserAccessRight>> GetAllUserAccessRightsAsync() {
            return base.Channel.GetAllUserAccessRightsAsync();
        }
        
        public System.Collections.Generic.List<WcfApi.AccessRights.RemovedUserAccessRight> GetAllRemovedUserAccessRights() {
            return base.Channel.GetAllRemovedUserAccessRights();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.AccessRights.RemovedUserAccessRight>> GetAllRemovedUserAccessRightsAsync() {
            return base.Channel.GetAllRemovedUserAccessRightsAsync();
        }
        
        public System.Collections.Generic.List<WcfApi.AccessRights.UserAccessRight> GetAllActiveUserAccessRights() {
            return base.Channel.GetAllActiveUserAccessRights();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.AccessRights.UserAccessRight>> GetAllActiveUserAccessRightsAsync() {
            return base.Channel.GetAllActiveUserAccessRightsAsync();
        }
        
        public System.Collections.Generic.List<WcfApi.AccessRights.UserAccessRight> GetUserAccessRights(System.Guid userId) {
            return base.Channel.GetUserAccessRights(userId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.AccessRights.UserAccessRight>> GetUserAccessRightsAsync(System.Guid userId) {
            return base.Channel.GetUserAccessRightsAsync(userId);
        }
        
        public System.Collections.Generic.List<WcfApi.AccessRights.RemovedUserAccessRight> GetRemovedUserAccessRights(System.Guid userId) {
            return base.Channel.GetRemovedUserAccessRights(userId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.AccessRights.RemovedUserAccessRight>> GetRemovedUserAccessRightsAsync(System.Guid userId) {
            return base.Channel.GetRemovedUserAccessRightsAsync(userId);
        }
        
        public System.Collections.Generic.List<WcfApi.AccessRights.UserAccessRight> GetActiveUserAccessRights(System.Guid userId) {
            return base.Channel.GetActiveUserAccessRights(userId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.AccessRights.UserAccessRight>> GetActiveUserAccessRightsAsync(System.Guid userId) {
            return base.Channel.GetActiveUserAccessRightsAsync(userId);
        }
        
        public WcfApi.AccessRights.UserAccessRight AddUserAccessRight(WcfApi.AccessRights.UserAccessRight userAccessRight) {
            return base.Channel.AddUserAccessRight(userAccessRight);
        }
        
        public System.Threading.Tasks.Task<WcfApi.AccessRights.UserAccessRight> AddUserAccessRightAsync(WcfApi.AccessRights.UserAccessRight userAccessRight) {
            return base.Channel.AddUserAccessRightAsync(userAccessRight);
        }
        
        public WcfApi.AccessRights.UserAccessRight UpdateUserAccessRight(WcfApi.AccessRights.UserAccessRight userAccessRight) {
            return base.Channel.UpdateUserAccessRight(userAccessRight);
        }
        
        public System.Threading.Tasks.Task<WcfApi.AccessRights.UserAccessRight> UpdateUserAccessRightAsync(WcfApi.AccessRights.UserAccessRight userAccessRight) {
            return base.Channel.UpdateUserAccessRightAsync(userAccessRight);
        }
        
        public WcfApi.AccessRights.RemovedUserAccessRight RemoveUserAccessRight(WcfApi.AccessRights.RemovedUserAccessRight removedUserAccessRight) {
            return base.Channel.RemoveUserAccessRight(removedUserAccessRight);
        }
        
        public System.Threading.Tasks.Task<WcfApi.AccessRights.RemovedUserAccessRight> RemoveUserAccessRightAsync(WcfApi.AccessRights.RemovedUserAccessRight removedUserAccessRight) {
            return base.Channel.RemoveUserAccessRightAsync(removedUserAccessRight);
        }
        
        public WcfApi.Customers.Customer AddCustomer(WcfApi.Customers.Customer customer) {
            return base.Channel.AddCustomer(customer);
        }
        
        public System.Threading.Tasks.Task<WcfApi.Customers.Customer> AddCustomerAsync(WcfApi.Customers.Customer customer) {
            return base.Channel.AddCustomerAsync(customer);
        }
        
        public WcfApi.Customers.Customer UpdateCustomer(WcfApi.Customers.Customer customer) {
            return base.Channel.UpdateCustomer(customer);
        }
        
        public System.Threading.Tasks.Task<WcfApi.Customers.Customer> UpdateCustomerAsync(WcfApi.Customers.Customer customer) {
            return base.Channel.UpdateCustomerAsync(customer);
        }
        
        public WcfApi.Customers.RemovedCustomer RemoveCustomer(WcfApi.Customers.RemovedCustomer removedCustomer) {
            return base.Channel.RemoveCustomer(removedCustomer);
        }
        
        public System.Threading.Tasks.Task<WcfApi.Customers.RemovedCustomer> RemoveCustomerAsync(WcfApi.Customers.RemovedCustomer removedCustomer) {
            return base.Channel.RemoveCustomerAsync(removedCustomer);
        }
        
        public System.Collections.Generic.List<WcfApi.Customers.Customer> GetAllCustomers() {
            return base.Channel.GetAllCustomers();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.Customers.Customer>> GetAllCustomersAsync() {
            return base.Channel.GetAllCustomersAsync();
        }
        
        public System.Collections.Generic.List<WcfApi.Customers.Customer> GetAllActiveCustomers() {
            return base.Channel.GetAllActiveCustomers();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.Customers.Customer>> GetAllActiveCustomersAsync() {
            return base.Channel.GetAllActiveCustomersAsync();
        }
        
        public System.Collections.Generic.List<WcfApi.Customers.RemovedCustomer> GetAllRemovedCustomers() {
            return base.Channel.GetAllRemovedCustomers();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.Customers.RemovedCustomer>> GetAllRemovedCustomersAsync() {
            return base.Channel.GetAllRemovedCustomersAsync();
        }
        
        public WcfApi.Customers.Customer GetCustomer(System.Guid customerId) {
            return base.Channel.GetCustomer(customerId);
        }
        
        public System.Threading.Tasks.Task<WcfApi.Customers.Customer> GetCustomerAsync(System.Guid customerId) {
            return base.Channel.GetCustomerAsync(customerId);
        }
        
        public WcfApi.Customers.RemovedCustomer GetRemovedCustomer(System.Guid removedCustomerId) {
            return base.Channel.GetRemovedCustomer(removedCustomerId);
        }
        
        public System.Threading.Tasks.Task<WcfApi.Customers.RemovedCustomer> GetRemovedCustomerAsync(System.Guid removedCustomerId) {
            return base.Channel.GetRemovedCustomerAsync(removedCustomerId);
        }
        
        public System.Collections.Generic.List<WcfApi.WorkTypes.WorkType> GetAllWorkTypes() {
            return base.Channel.GetAllWorkTypes();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.WorkTypes.WorkType>> GetAllWorkTypesAsync() {
            return base.Channel.GetAllWorkTypesAsync();
        }
        
        public WcfApi.WorkTypes.WorkType FindWorkType(string name) {
            return base.Channel.FindWorkType(name);
        }
        
        public System.Threading.Tasks.Task<WcfApi.WorkTypes.WorkType> FindWorkTypeAsync(string name) {
            return base.Channel.FindWorkTypeAsync(name);
        }
        
        public System.Collections.Generic.List<WcfApi.WorkStatuses.WorkStatus> GetAllWorkStatuses() {
            return base.Channel.GetAllWorkStatuses();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.WorkStatuses.WorkStatus>> GetAllWorkStatusesAsync() {
            return base.Channel.GetAllWorkStatusesAsync();
        }
        
        public WcfApi.WorkStatuses.WorkStatus FindWorkStatus(string name) {
            return base.Channel.FindWorkStatus(name);
        }
        
        public System.Threading.Tasks.Task<WcfApi.WorkStatuses.WorkStatus> FindWorkStatusAsync(string name) {
            return base.Channel.FindWorkStatusAsync(name);
        }
        
        public System.Collections.Generic.List<WcfApi.SoftwareTypes.SoftwareType> GetAllSoftwareTypes() {
            return base.Channel.GetAllSoftwareTypes();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.SoftwareTypes.SoftwareType>> GetAllSoftwareTypesAsync() {
            return base.Channel.GetAllSoftwareTypesAsync();
        }
        
        public WcfApi.SoftwareTypes.SoftwareType FindSoftwareType(string name) {
            return base.Channel.FindSoftwareType(name);
        }
        
        public System.Threading.Tasks.Task<WcfApi.SoftwareTypes.SoftwareType> FindSoftwareTypeAsync(string name) {
            return base.Channel.FindSoftwareTypeAsync(name);
        }
        
        public System.Collections.Generic.List<WcfApi.WorkRequests.WorkRequest> GetAllWorkRequests() {
            return base.Channel.GetAllWorkRequests();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.WorkRequests.WorkRequest>> GetAllWorkRequestsAsync() {
            return base.Channel.GetAllWorkRequestsAsync();
        }
        
        public System.Collections.Generic.List<WcfApi.WorkRequests.RemovedWorkRequest> GetAllRemovedWorkRequests() {
            return base.Channel.GetAllRemovedWorkRequests();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.WorkRequests.RemovedWorkRequest>> GetAllRemovedWorkRequestsAsync() {
            return base.Channel.GetAllRemovedWorkRequestsAsync();
        }
        
        public System.Collections.Generic.List<WcfApi.WorkRequests.WorkRequest> GetAllActiveWorkRequests() {
            return base.Channel.GetAllActiveWorkRequests();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WcfApi.WorkRequests.WorkRequest>> GetAllActiveWorkRequestsAsync() {
            return base.Channel.GetAllActiveWorkRequestsAsync();
        }
        
        public WcfApi.WorkRequests.WorkRequest AddWorkRequest(WcfApi.WorkRequests.WorkRequest workRequest) {
            return base.Channel.AddWorkRequest(workRequest);
        }
        
        public System.Threading.Tasks.Task<WcfApi.WorkRequests.WorkRequest> AddWorkRequestAsync(WcfApi.WorkRequests.WorkRequest workRequest) {
            return base.Channel.AddWorkRequestAsync(workRequest);
        }
        
        public WcfApi.WorkRequests.WorkRequest UpdateWorkRequest(WcfApi.WorkRequests.WorkRequest workRequest) {
            return base.Channel.UpdateWorkRequest(workRequest);
        }
        
        public System.Threading.Tasks.Task<WcfApi.WorkRequests.WorkRequest> UpdateWorkRequestAsync(WcfApi.WorkRequests.WorkRequest workRequest) {
            return base.Channel.UpdateWorkRequestAsync(workRequest);
        }
        
        public WcfApi.WorkRequests.RemovedWorkRequest RemoveWorkRequest(WcfApi.WorkRequests.RemovedWorkRequest removedWorkRequest) {
            return base.Channel.RemoveWorkRequest(removedWorkRequest);
        }
        
        public System.Threading.Tasks.Task<WcfApi.WorkRequests.RemovedWorkRequest> RemoveWorkRequestAsync(WcfApi.WorkRequests.RemovedWorkRequest removedWorkRequest) {
            return base.Channel.RemoveWorkRequestAsync(removedWorkRequest);
        }
        
        public WcfApi.WorkRequests.WorkRequest GetWorkRequest(System.Guid workRequestId) {
            return base.Channel.GetWorkRequest(workRequestId);
        }
        
        public System.Threading.Tasks.Task<WcfApi.WorkRequests.WorkRequest> GetWorkRequestAsync(System.Guid workRequestId) {
            return base.Channel.GetWorkRequestAsync(workRequestId);
        }
        
        public WcfApi.WorkRequests.RemovedWorkRequest GetRemovedWorkRequest(System.Guid removedWorkRequestId) {
            return base.Channel.GetRemovedWorkRequest(removedWorkRequestId);
        }
        
        public System.Threading.Tasks.Task<WcfApi.WorkRequests.RemovedWorkRequest> GetRemovedWorkRequestAsync(System.Guid removedWorkRequestId) {
            return base.Channel.GetRemovedWorkRequestAsync(removedWorkRequestId);
        }
    }
}
